#!/usr/bin/env ruby
require 'rfc5322.rb'
include Rfc5322

require 'rubygems'
require 'maildir'
require 'trollop'

def process_account(account,config)
    begin
        client = Rfc5322.login(account,config)
    rescue
        puts "Could not authenticate #{account}"
        exit 1
    end
    account_config=config[:accounts][account]
    
    # if there last tweet received is unknown, start from the first tweet
    if account_config[:since_id] == nil
        account_config[:since_id] = 1 
    end
    # get the last 200 tweets from the last received tweet (200 is the max)
    begin
    timeline=client.statuses.home_timeline? :since_id => account_config[:since_id],:count => 200
    rescue 
        # this assumes that the only time we get a non 200 response is from a bad consumer key
        puts "Unable to continue, please upgrade"
        exit 1
    end
    if timeline.length > 0 
        # maildir
        if account_config[:maildir]
            maildir = Maildir.new(account_config[:maildir])
            begin
            timeline.reverse.each do |tweet| maildir.add(Rfc5322.create_email(tweet,account)) end
            rescue
                puts "Could not save tweet in #{maildir}"
                exit 1
            end
        else # currently no other storage options are available, so fail if there is no maildir set
            puts "No maildir set for #{account}"
            exit 1
        end

        # store id for latest message
        account_config[:since_id] = timeline[0].id
    end
end


# Main
opts = Trollop::options do
    opt :add_account, "Add account", :type => :string
end

begin
    config_file = "#{ENV['HOME']}/.rfc5322.yaml"
    config = YAML.load_file(config_file)
    if config == false
        puts "Config empty, trying backup"
        config = YAML.load_file(config_file + ".backup")
    end
rescue
    unless opts[:add_account_given]
        puts "Could not find #{config_file}"
        exit 1
    end
    config = {}
end


# If --add-account go through add account dialog
if opts[:add_account_given]
    if config[:accounts] == nil
        config[:accounts] = {}
    end
    print "Maildir: "
    maildir = gets.strip
    config[:accounts][opts[:add_account].to_sym]={:maildir => maildir}
end


if  config == {} or config[:accounts] == nil
    puts "No accounts in #{config_file}"
    exit 1
end

config[:accounts].keys.each do |account| process_account(account,config) end

begin
    File.rename(config_file,config_file + ".backup")
    File.open(config_file, "w") do |f| f.write(config.to_yaml) end
rescue
    puts "Could not update #{config_file}"
    exit 1
end
